МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Кафедра програмної інженерії




Звіт
з практичної роботи №1
з дисципліни «Скриптові мови програмування»





Виконала: 
ст. гр. ПЗПІ-23-2 
Краснокутська Ю. Є. 
Перевірив: 
ст. викл. каф. ПІ 
Сокорчук І. П. 







Харків – 2025
    1 Розробка універсальних додатків для різних типів кодувань символьної інформації
        1.1 Мета роботи: 
Створення сценаріїв автоматизації за допомогою скриптової мови програмування Bash (Bourne Again Shell).
        1.2 Хід роботи
Написатати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу.
            1.2.1 Вимоги до скрипта: 
    • а) ялинка повинна бути симетричною;
    • б) яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»;
    • в) ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу;
    • г) висота стовбура завжди має дорівнювати 2 рядкам, а ширина – 3 стовбцям;
    • д) висота шару снігу завжди має дорівнювати 1 рядку;
    • е) висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску;
    • ж) параметри скрипта повинні мати додатнє значення;
    • и) вказані значення повинні округлятися до потрібних у меншу сторону;
    • к) якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес; 
    • л) у скрипті потрібно обовʼязково використати функцію, а також такі конструкції:
    1) if ... then ... fi;
    2) while ... do ... done;
    3) until ... do ... done;
    4) for ... in .. do ... done;
    5) for ((...)); do ... done.
    • м) файл скрипта повинен бути виконуваним файлом для усіх користуачів системи;
    • н) право редагувати файл скрипта повинен мати лише власник скрипта.
            1.2.2 Створення скрипта відповідно до вимог
Весь код скрипта буде наведений лише в додатку через великий розмір документу, який не вдається стиснути до потрібного розміру.
Скрипт, створений мовою Bash, для зручності у використанні має містити шебанг.  Шебанг має вигляд «#!», ставиться на початку файлу скрипта та вказує операційній системі, який інтерпретатор слід використовувати для виконання цього файлу. В якості шляху до інтерпретатора вкажемо «/bin/bash». 
Серед вимог були присутні обмеження для аргументів.
За допомогою змінної «$#» виконаємо перевірку кількості аргументів. Висота ялинки має передаватись першим аргументом, а ширина снігу – другим. Щоб перевірити, чи відповідає ширина шару снігу допустимій за вказаної висоти, необхідно знати ширину ярусу, яку обрахуємо за формулою «висота одного ярусу * 2  1». Висоту одного ярусу – «(загальна висоти ялинки  3) / 2 1». 
Значення висоти ялинки має бути парним, інакше округлимо у меншу сторону на 1. Значення ширини снігу має бути непарним, то його так само округлимо.
Якщо аргументи не задовольняють умовам, то скрипт завершиться із ненульовим кодом та повідомить про помилки у стандартний потік помилок. 
Яруси ялинки мають складатись з 2 символів – «*» та «#», тому створимо змінну, в якій будемо зберігати поточний символ.
Оголосимо функцію, яка буде малювати 1 рядок. Кожен рядок має починатись з відступу вказаної довжини, містить кількість символів вказаної довжини, використовуючи вказаний символ, тому для зручності всі значення збережемо у змінні. 
Ялинка складається з двох ярусів – верхнього та нижнього, нижній ярус не має верхівки. Рядки почергово мають складатись або із символу «*», або із символу «#». Кожен новий рядок у ялинці буде ширшим на 2 символи. 
Стовбур ялинки завжди однакової висоти та ширини, але відрізняється лише відступом на початку рядку. Відступ розрахуємо як «(ширина снігу  ширина рядку) / 2». Рядки стовбура мають знаходитись по центру. Ширина стовбура становить 3 символи, висота – 2. Стовбур має складатись із символу «#». 
Шар снігу не має відступів, має певну довжину та складається з символу «*». 
Дамо дозвіл на виконання скрипту за допомогою команди «chmod» із флажком «-x». На жаль, документ мав завеликий розмір, тому результати перевірки тестів довелось прибрати.
        1.3 Висновки
На даній практичній роботі я навчилась створювати сценарії автоматизації за допомогою скриптової мови програмування Bash (Bourne Again Shell).
ДОДАТОК А
Повний текст написаного Bash-скрипта
1 #!/bin/bash
2
3 if (( $# != 2 )); then
4     echo "Неправильна кількість аргументів" >&2
5     exit 1;
6 fi
7
8 tree_height=$1
9 snow_width=$2
10
11 if (( tree_height < 8 )); then
12     echo "Аргументи мають бути додатними" >&2;
13     exit 1;
14 fi
15
16 if (( snow_width < 7 )); then
17     echo "Аргументи мають бути додатними" >&2;
18     exit 1;
19 fi
20
21 if (( tree_height % 2 == 1 )); then
22     tree_height=$((tree_height-1))
23 fi
24
25 if (( snow_width % 2 == 0 )); then
26     snow_width=$((snow_width-1))
27 fi
28
29 if (( snow_width - (((tree_height-3)/2 + 1) * 2 - 1 ) != 2 )); then
30     echo "Неможливо намалювати ялинку" >&2;
31     exit 1;
32 fi
33
34 character='#'
35
36 draw_line() {
37     local padding_width=$1
38     local string_width=$2
39     local character=$3
40
41     j=0
42     while (( j<padding_width )); do
43         echo -n " "
44         j=$((j+1))
45     done
46
47     j=0
48     until (( j>=string_width )); do
49         echo -n "$character"
50         j=$((j+1))
51     done
52
53     echo ""
54 }
55
56 for layer in {1..2}; do
57     if ((layer == 1)); then
58         string_width=1
59     else
60         string_width=3
61     fi
62
63     for ((i=$layer; i <= (tree_height-3)/2 + 1; i++)); do
64         if [ "$character" = '*' ]; then
65             character="#"
66         else
67             character='*'
68         fi
69
70         draw_line $(((snow_width - string_width)/2)) $string_width "$character"
71
72         string_width=$((string_width+2))
73     done
74 done
75
76 draw_line $(((snow_width - 3)/2)) 3 "#"
77 draw_line $(((snow_width - 3)/2)) 3 "#"
78 draw_line 0 $snow_width '*' 

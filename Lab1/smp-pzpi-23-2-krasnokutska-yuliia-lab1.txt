                 МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
   ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



                         Кафедра Програмної інженерії




                                     Звіт
                           з лабораторної роботи №1
                з дисципліни: «Скриптові мови програмування»
                   з теми: «Продовольчий магазин «Весна»»




Виконав:                                                          Перевірив:
ст. гр. ПЗПІ-ПЗПІ-23-2                          Старший викладач кафедри ПІ
Краснокутська Ю. Є.                                            Сокорчук І. П.




                                Харків – 2025
                                                                                   2
                   1 ПРОДОВОЛЬЧИЙ МАГАЗИН «ВЕСНА»
      1.1 Історія змін

№ Дата                 Версія звіту    Опис змін та виправлень
1 21.04.2025           0.1             Створено звіт

      1.2 Мета роботи

      Ознайомитися        з    основними      командами      Bash     для    роботи
з    файлами      та      текстовими     даними.     Навчитися      використовувати
команди select, ls, awk, sort, uniq, tee, cat, sed, iconv тощо. Розробити Bash-скрипт
для перетворення CSV файла розкладу занять у придатний для імпорту в Google
Календар CSV формат.

      1.3 Хід роботи

      Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.nure.
ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат
CSV для завантаження в Google Календар https://support.google.com/.

      1.3.1 Вимоги до скрипта:

      Скрипт має підтримувати наступні ключі та параметри: help для виведення
довідки та успішного завершення роботи, version для виведення інформації про
версію та успішного завершення роботи, а також q або quiet для попередження
виведення інформації у стандартний потік виведення.
      В якості параметрів скрипт має приймати академічну групу та шлях до
вхідного CSV файлу або лише шлях до файлу. Якщо при виклику скрипта не були
вказані академічна група або вхідний CSV файл, то скрипт повинен вивести меню
вибору файла за допомогою команди select та сформувати відсортований за датою
в іменах файлів (від старіших до новіших) список доступних у поточній директорії
CSV файлів за шаблоном: TimeTable_??_??_20??.csv. Як тільки файл буде обрано,
скрипт має відкрити вибраний CSV файл та згенерувати список академічних груп,
                                                                                  3
що містяться у файлі, відсортувати їх за алфавітом (sort, uniq) та вивести меню
вибору групи за допомогою select.
     Правила обробки файлу:
      –   читати вхідний CSV файл та вибирати рядки, що відповідають вибраній
          академічній групі;
      –   визначити порядкий номер для кожного заняття (лекція, практичне
          заняття, лабораторна робота) із врахуванням того, що лабораторні роботи
          складаються із двох пар, а решта занять — із однієї пари;
      –   значення для стовбця «Subject» буде формуватись із стовпця «Тема»
          вхідного CSV файлу, але без назви академічної групи та дефіса на початку
          цього поля. В кінці додати крапку з комою;
      –   наприкінці кожної теми кожного заняття в стовбці «Subject» додати
          порядковий номер після крапки з комою;
      –   значення для стовпців «Start Date», «Start Time», «End Date» та «End Time»
          мають братися з відповідних стовпців «Дата начала», «Время начала»,
          «Дата завершения» та «Время завершения»;
      –   дата та час мають приводитись до формату «mm/dd/yyyy, HH:MM AM|
          PM,» Google Календаря. Формат часу – 12-годинний;
      –   значення для стовбця «Description» буде формуватись із стовпця «Опис
          (Описание)» вхідного CSV файлу;
      –   дані мають бути відформатовані відповідно до вимог Google Календаря;
      –   створені для Google Календаря дані мають виводитись у стандартний
          потік виведення, якщо це не заблоковано ключем -q або –quiet;
      –   результат   має      бути   записаний   у    новий   файл     із   назвою
          Google_TimeTable_??_??_20??.csv, де ??_??_20?? — дата, що відповідає
          вхідному файлу.
     Якщо файл не знайдено або файл є недоступним для читання, вивести
повідомлення про помилку в стандартний потік помилок та повернути код помилки.
     Якщо група не знайдена у вибраному файлі, повідомити про це користувача
та запропонувати вибір іншої групи.
     Якщо група не вказана, але у вказаному файлі присутня лише одна група,
створити CSV файл Google Календаря для цієї групи.
                                                                                 4
     Якщо сталася помилка під час обробки файла, повідомити про це та
завершити роботу з відповідним кодом помилки.
     Файл скрипта виконуваний для всіх користувачів. Редагування файла скрипта
дозволене лише власнику файла.
     Рекомундуєься використати команди:
      –   select – створення меню вибору файла та групи;
      –   ls – отримання списку доступних CSV файлів;
      –   awk – фільтрація та обробка даних CSV файла;
      –   sort – сортування даних (груп, дат тощо);
      –   uniq – усунення дублікатів у списку груп;
      –   tee – збереження вихідних даних у файл та вивід на екран;
      –   cat – перегляд вмісту файла;
      –   sed – видалення зайвих пробілів, форматування дат, заміна символів;
      –   iconv – перетворення кодування файлів (Windows-1251 → UTF-8).

     1.3.2 Створення скрипта відповідно до вимог

     Створимо файл та задамо відповідні до умови права доступу.
     Відкриємо файл та визначимо шебанг «#!/bin/bash».
     Створимо перевірку першого аргументу командного рядка [додаток Б, рядки
3-23]. Якщо передано –help, буде виведено інструкцію з використання скрипта та
завершено роботу програми. Якщо передано –version, буде виведено номер версії
та завершено роботу програми. Якщо передано -q або –quiet, встановлюється
прапорець quiet=true і зсувається список аргументів.
     Обробимо вхідні параметри [додаток Б, рядки 25-31]. Якщо передано 2
аргументи, то будемо вважати, що перший аргумент – це назва групи, а другий –
файл CSV. Якщо передано лише 1 аргумент, то будемо вважати, що це шлях до
файлу. Збережемо аргумент(-и) у змінних.
     Знайдемо всі файли в поточній директорії, які відповідають шаблону
TimeTable_??_??_20??.csv, відсортуємо їх та збережемо у змінну. Якщо такі файли
не знайшлись, то результат перенаправляється в «нікуди» [додаток Б, рядок 33].
     Реалізуємо можливість вибору файлу зі списку існуючих, якщо користувач не
вказав файл [додаток Б, рядки 35-39].
                                                                             5
     Перевіримо чи існує такий файл [додаток Б, рядки 41-44]. Якщо такого файлу
не існує, то повідомляємо користувача про цю помилку, перенаправляємо вивід в
потік помилок та виходимо з програми з кодом 1.
     Перевіримо чи є доступ до читання файлу [додаток Б, рядки 46-49]. Якщо
файл недоступний для читання, то повідомляємо користувача про цю помилку,
перенаправляємо вивід в потік помилок та виходимо з програми з кодом 2.
     Зчитуємо файл [додаток Б, рядок 51]. Замінюємо символи повернення каретки
«rn» з Windows на символи нового рядка «n» в Unix та конвертуємо кодування з
CP-1251 у Windows в UTF-8. Зберігаємо у змінну.
     Витягуємо назви груп та відсортуємо усі унікальні входження [додаток Б,
рядки 53-67]. Задамо формат полів. Обробляємо всі рядки, крім першого, бо
це заголовок. Видаляємо початкові лапки з першого поля, розбиваємо рядок за
роздільником « - » та виводимо назву групи. Якщо немає поділу за шаблоном,
то це означає, що рядок не містить « - » і розклад складений для однієї групи,
тому запишемо в змінну «1» для подальшої обробки, це слугуватиме маркером
спеціальної обробки. Сортуємо отримані назви груп за алфавітом та залишаємо
тільки унікальні.
     Вибір групи для обробки [додаток Б, рядки 69-77]. Перевіряє, чи група не
передана як аргумент скрипта. Якщо група не вказана та знайдено лише 1 групу
у файлі, то обраною групою автоматично стає ця група, тобто дорівнюватиме «1»,
інакше – пропонуємо користувачу обрати групу зі списку.
     Перевірка наявності обраної групи [додаток Б, рядки 79-88]. Перевіряємо
чи існує обрана група в списку. Якщо обрана група не існує – повідомляємо про
помилку та пропонуємо обрати іншу. Повторюжмо логіку вибору групи.
     Встановлення шаблону для порівняння рядків [додаток Б, рядки 90-94]. Якщо
обрана група дорівнює «1», то шаблон – будь-який рядок, який починається з
подвійної лапки, інакше шаблон – будь-який рядок, який починається з подвійної
лапки та включатиме назву групи та тире.
     Визначимо функцію для обробки даних CSV-файлу. Вона матиме в собі
вкладені функції [додаток Б, рядки 96-145]. Вміст CSV-файлу, попередньо
збережений, передаємо на вхід утиліти awk, яка буде обробляти кожен рядок як
запис з таблиці. Задамо шаблон розпізнавання полів. Передамо awk регулярний
                                                                                     6
вираз, за яким він пізніше буде знаходити записи для певної групи [додаток Б, рядки
97-98].
      Визначимо функцію для формування дати [додаток Б, рядки 99-103].
Видалимо з дати усі подвійні лапки та розіб’ємо дату на частини за роздільником
«.». Повернемо у форматі для Google Calendar: «mm/dd/yyyy».
      Визначимо функцію для формування часу [додаток Б, рядки 105-120].
Видалимо з часу усі подвійні лапки, розіб’ємо час на частини за роздільником «:».
Час треба привести до 12-годинного формату. В залежності від години визначимо
AM чи PM. Повернемо у форматі для Google Calendar: HH:MM AM|PM,».
      Обробимо перший рядок та виведемо усі заголовки [додаток Б, рядки
122-124]. Обробимо інші рядки [додаток Б, рядки 126-144]. Перевіримо чи перше
поле відповідає шаблону групи та будемо обробляти всі рядки, які відповідають
шаблону. З шаблону видаляємо лапки. Розбиваємо шаблон за роздільником « - ».
Якщо розділення вдалося – беремо другу частину (назва предмету), інакше – весь
текст. Додамо номер заняття, відформатовані дати та час у 12-годинному форматі.
Номер заняття підраховується за допомогою масиву, який відстежує кількість
занять для кожної дати. Кожного разу, коли зустрічається заняття на певну дату,
відповідний лічильник збільшується.
      Вивід у файл [додаток Б, рядки 147-151]. Якщо прапорець -q або –quiet
не задані, тобто quiet=false, перенаправляємо вивід результату у файл з назвою
за шаблоном Google_TimeTable_??_??_20??.csv та в консоль. Якщо quiet=true, то
перенаправляємо вивід лише у файл з назвою за шаблоном.

      1.4 Висновки

      На    даній     лабораторній     роботі     я    навчилась     використовувати
команди select, ls, awk, sort, uniq, tee, cat, sed, iconv тощо та розробила Bash-скрипт
для перетворення CSV файла розкладу занять у придатний для імпорту в Google
Календар CSV формат.
                                                                                 7
                                ДОДАТОК А
                                  Відеозапис

    Відеозапис презентації результатів лабораторної роботи: https://youtu.be/xKeasbNZ3sY
    Хронологічний опис відеозапису:
    00:00 – Вступ та опис завдання
    00:16 – Огляд коду: обробка аргументів та параметрів (–help, –version, -q)
    01:41 – Огляд коду: підготовка даних та витягнення груп (iconv, sed, awk)
    04:06 – Огляд коду: основна логіка обробки та форматування
    09:05 – Демонстрація роботи скрипта та імпорт в Google Календар
                                                                                  8
                                     ДОДАТОК Б
                                 Програмний код

      Б.1 Файл smp-pzpi-23-2-krasnokutska-yuliia-lab1-code

      GitHub репозиторій: https://github.com/NureKrasnokutskaYuliia/smp-pzpi-23-2-krasnokutska-yuliia/tree/main/Lab4/smp-pzpi-23-2-krasnokutska-yuliia-lab1/smp-pzpi-23-2-krasnokutska-yuliia-lab1-code

  1   #!/bin/bash
  2
  3   case "$1" in
  4     --help)
  5        echo 'Конвертує файл schedule.csv з формату CIST у формат Google
      Calendar'
  6        echo "Синтаксис: $0 [--help | --version] | [-q|--quiet]
      [[академ_група] файл_cist.csv]"
  7        echo ""
  8        echo -e "\t--help \t\t\tпоказати цю довідку та вийти"
  9        echo -e "\t--version \t\tпоказати інформацію про версію та вийти"
 10        echo -e "\t-q, --quiet \t\tне друкувати результат в stdout"
 11        echo -e "\tакадем_група \t\tназва групи (додатково)"
 12        echo -e "\tфайл_cist.csv \t\tфайл формату CSV, який потрібно
      обробити"
 13        exit 0
 14        ;;
 15     --version)
 16        echo 'CIST Schedule Converter 1.0.0'
 17        exit 0
 18        ;;
 19     -q|--quiet)
 20        quiet=true
 21        shift
 22        ;;
 23   esac
 24
 25   if [ $# -eq 2 ]; then
 26      group_s="$1"
 27      shift
 28      csv_s="$1"
 29   elif [ $# -eq 1 ]; then
 30      csv_s="$1"
 31   fi
 32
 33   csv_files=$(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)
 34
 35   if [ -z "$csv_s" ]; then
 36      select csv_s in $csv_files; do
 37        break;
 38      done
 39   fi
 40
                                                                            9

41   if [ ! -f "$csv_s" ]; then
42      echo "Файл '$csv_s' не існує." >&2
43      exit 1
44   fi
45
46   if [ ! -r "$csv_s" ]; then
47      echo "Доступ до читання файлу '$csv_s' відхилено." >&2
48      exit 2
49   fi
50
51   data_from_csv=$( cat "$csv_s" | sed 's/\r/\n/g' | iconv -f cp1251 -t
     utf-8 )
52
53   groups=$(
54       echo "$data_from_csv" \
55       | awk -vFPAT='[^,]*|"[^"]*"' '
56         NR > 1 {
57              gsub(/^"/, "", $1);
58              if (split($1, result, " - ") == 1){
59                print "1"
60              } else {
61                print result[1]
62              }
63         }
64       ' \
65       | sort \
66       | uniq
67   )
68
69   if [ -z "$group_s" ]; then
70      if [ $(echo "$groups" | wc --lines) -eq 1 ]; then
71         group_s="$groups"
72      else
73         select group_s in $groups; do
74           break;
75         done
76      fi
77   fi
78
79   if ! echo "$groups" | grep -q "$group_s" ; then
80      echo "Не існує групи '$group_s' в наданому файлі. Будь-ласка,
     оберіть іншу групу."
81      if [ $(echo "$groups" | wc --lines) -eq 1 ]; then
82         group_s="$groups"
83      else
84         select group_s in $groups; do
85           break;
86         done
87      fi
88   fi
89
90 if [ "$group_s" = "1" ]; then
91      group_patt='^\"'
92 else
93      group_patt="^\"$group_s - "
94 fi
                                                                        10

 95
 96 processing() {
 97     echo "$data_from_csv" \
 98     | awk -vFPAT='[^,]*|"[^"]*"' -v group_patt="$group_patt" '
 99     function format_date(date) {
100         gsub(/"/, "", date)
101         split(date, d, ".")
102         return d[2] "/" d[1] "/" d[3]
103     }
104
105     function format_time(time,    ampm) {
106         gsub(/"/, "", time)
107         split(time, t, ":")
108
109         if (t[1] == "00" && t[2] == "00" && t[3] == "00") {
110            ampm="AM"
111         } else if (t[1] == "12" && t[2] == "00" && t[3] == "00") {
112            ampm="PM"
113         } else if (t[1] >= 12) {
114            ampm="PM"
115         } else {
116            ampm="AM"
117         }
118
119         return t[1] ":" t[2] " " ampm
120     }
121
122     NR==1 {
123       print "Subject,Start Date,Start Time,End Date,End
    Time,Description"
124     }
125
126     NR!=1 && $1 ~ group_patt {
127       gsub(/"/, "", $1)
128       if(split($1, subject, " - ") == 1) {
129            $1 = subject[1]
130       }
131       else {
132            $1 = subject[2]
133       }
134
135       $2 = format_date($2)
136       $3 = format_time($3)
137       $4 = format_date($4)
138       $5 = format_time($5)
139
140       date_lessons[$2]++
141
142       print "\"" $1 "; №" date_lessons[$2] "\"," $2 "," $3 "," $4 ","
    $5 "," $12
143     }
144     '
145 }
146
147 if [ -z "$quiet" ]; then
148         processing | tee "Google_$csv_s"
                                          11

149 else
150        processing > "Google_$csv_s"
151 fi

